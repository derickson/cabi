input { stdin { } }

filter {
	
	## ----- CSV PROCESSING --------
	csv {
		columns => ["rawDuration","startDate","endDate","startStationId","startStation","rawStartLat","rawStartLong","endStationId","endStation","rawEndLat","rawEndLong", "bikeNum","memberType","yob","gender"]
	}
	mutate {
		remove_field => "message"
		add_field => {
			# "durHours" => 0
			# "durMin" => 0
			# "durSec" => 0
			"city" => "New York, NY"
		}
	}
	mutate {
		convert => {
			"rawStartLat" => "float"
			"rawStartLong" => "float"
			"rawEndLat" => "float"
			"rawEndLong" => "float"
			"startStationId" => "integer"
			"endStationId" => "integer"
			"rawDuration" => "integer"
		}
	}
	
	
	## ----- INTERRPET DURATION ------
	ruby {
		code => " event['duration'] = 	 event['rawDuration']  / 60.0 "
		remove_field => "rawDuration"
	}
	

	## ----- Process Geospatial --------
	ruby {
		code => " event['startLocation'] = 	[ event['rawStartLong'],  event['rawStartLat'] ] "
		remove_field => ["rawStartLat", "rawStartLong"]
	}
	ruby {
		code => " event['endLocation'] = 	[ event['rawEndLong'],  event['rawEndLat'] ] "
		remove_field => ["rawEndLat", "rawEndLong"]
	}


	## ----- INTERPRET DATES --------
	# event date is the start Date
	date {
		match => ["startDate", 'MM/dd/YYYY HH:mm']
		timezone => "America/New_York"
		locale => en
	}
	# adjust date to ISO 8601
	date {
		match => ["startDate", 'MM/dd/YYYY HH:mm']
		timezone => "America/New_York"
		locale => en
		target => "startDate"
	}
	# adjust date to ISO 8601
	date {
		match => ["endDate", 'MM/dd/YYYY HH:mm']
		timezone => "America/New_York"
		locale => en
		target => "endDate"
	}




# 	## ------ Behavior ------
	ruby {
		code => " event['behavior'] =  (event['startStation'] == event['endStation']) ? 'Round Trip' : 'Point to Point'"
	}
	#make all data sources conform to 'Subscriber' and 'Casual' for memberType
	ruby {
		code => " if (event['memberType'] == 'Registered') then event['memberType'] = 'Subscriber' end "
	}
	ruby {
		code => " if (event['memberType'] == 'Customer') then event['memberType'] = 'Subscriber' end "
	}
	
	## gender terms from data dictionary
	ruby {
		code => " event['gender'] = (event['gender'] == '1') ?  'Male' : (event['gender'] == '2') ? 'Female' : 'Unknown' "
	}
	
	## yob
	ruby {
		code => " event['yob'] = (event['yob'] == '\\N') ? 0 : event['yob'].to_i "
	}
	if [yob] == 0 {
		mutate { remove_field => "yob" }
	}
	
	

}

output { 
  # stdout { codec => rubydebug }
   stdout { codec => dots }
  #stdout { codec => json }
  elasticsearch_http {
  	  host =>  localhost #"54.209.159.230"
   	  index => "bikelog-ny-%{+YYYY}"
  	  index_type => rides
   	  manage_template => false
  	  flush_size => 2000
  	  # user => staff
  	  # password => esFantastic42
  }
}