input { stdin { } }

filter {


	## ----- CSV PROCESSING --------
	csv {
		columns => ["rawDuration","startDate","rawStartStation","endDate","rawEndStation","bikeNum","memberType"]
	}
	mutate {
		remove_field => "message"
		add_field => { 
			"durHours" => 0 
			"durMin" => 0
			"durSec" => 0
			"city" => "Washington, DC"
		}
	}
	mutate {
		convert => {
			"durHours" => "integer"
			"durMin" => "integer"
			"durSec" => "integer"
		}
	}
	
	
	## ----- CLEAN STATION NAMES --------
	# remove optinonal station number from end of the station name
	grok {
		match => [ "rawStartStation", "^%{DATA:startStation}(\ \(%{INT}\))?$"]
		remove_field => "rawStartStation"
	}
	# remove optinonal station number from end of the station name
	grok{
		match => [ "rawEndStation", "^%{DATA:endStation}(\ \(%{INT}\))?$"]
		remove_field => "rawEndStation"
	}
	
	
	## ----- INTERRPET DURATION ------
	grok {
	 	match => [ "rawDuration", "(%{INT:durHours:int}h\ ?)?(%{INT:durMin:int}m\ ?)?(%{INT:durSec:int}s)?"]
		overwrite => ["durHours", "durMin", "durSec"]
	}
	ruby {
		code => " event['duration'] = 	 (event['durHours']  * 3600 + event['durMin'] * 60 + event['durSec']) / 60.0 "
		remove_field => ["rawDuration","durHours","durMin","durSec"]
	}

	
	## ----- INTERPRET DATES --------
	# event date is the start Date
	date {
		#2014-10-01 00:01
		match => ["startDate", 'YYYY-MM-dd HH:mm']
		timezone => "America/New_York"
		locale => en
	}
	# adjust date to ISO 8601
	date {
		match => ["startDate", 'YYYY-MM-dd HH:mm']
		timezone => "America/New_York"
		locale => en
		target => "startDate"
	}
	# adjust date to ISO 8601
	date {
		match => ["endDate", 'YYYY-MM-dd HH:mm']
		timezone => "America/New_York"
		locale => en
		target => "endDate"
	}

	## ----- Process Geospatial --------
    geoEnrich {
		database => "/Users/dave/dev/examples/cabi/logstash-attempt/fullDCStations.csv"
		source => "startStation"
		target => "startLocation"
    }
    geoEnrich {
		database => "/Users/dave/dev/examples/cabi/logstash-attempt/fullDCStations.csv"
		source => "endStation"
		target => "endLocation"
    }
	
	## ------ Behavior ------
	ruby {
		code => " event['behavior'] =  (event['startStation'] == event['endStation']) ? 'Round Trip' : 'Point to Point'"
	}
	#make all data sources conform to 'Subscriber' and 'Casual' for memberType
	ruby {
		code => " if (event['memberType'] == 'Registered') then event['memberType'] = 'Subscriber' end "
	}
	

}

output { 
  #stdout { codec => rubydebug }
  stdout { codec => dots }
  #stdout { codec => json }
  
  elasticsearch {
    index => "bikeshare-dc"
    hosts => ["localhost:9200"]
    #user => "es_admin"
    #password => "password"
    
    manage_template => true
    template => "./bikeshare_template.json"
    template_name => "bikeshare_template"
    template_overwrite => true
    
    ## TODO - WOULD LOVE TO TURN THESE ON NOT WORKING YET
    # ssl => true
    # ssl_certificate_verification => false
  }