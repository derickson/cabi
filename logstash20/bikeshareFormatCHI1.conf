input { stdin { } }

filter {
	
	## ----- CSV PROCESSING --------
	# trip_id,starttime,stoptime,bikeid,tripduration,from_station_id,from_station_name,to_station_id,to_station_name,usertype,gender,birthday
	# 4118,2013-06-27 12:11,2013-06-27 12:16,480,316,85,Michigan Ave & Oak St,28,Larrabee St & Menomonee St,Customer,,
	# 4275,2013-06-27 14:44,2013-06-27 14:45,77,64,32,Racine Ave & Congress Pkwy,32,Racine Ave & Congress Pkwy,Customer,,
	
	csv {
		columns => ["tripId","startDate","endDate","bikeNum","rawDuration","startStationId","startStation","endStationId","endStation","memberType","gender","yob"]
	}
 
	mutate {
		remove_field => ["message","tripId"]
		add_field => {
			"city" => "Chicago, IL"
		}
	}
	mutate {
		convert => {
			"startStationId" => "integer"
			"endStationId" => "integer"
			"rawDuration" => "integer"
		}
	}

#
#
## ----- INTERRPET DURATION ------
	ruby {
		code => " event['duration'] = 	 event['rawDuration']  / 60.0 "
		remove_field => "rawDuration"
	}
#
#
# 	## ----- INTERPRET DATES --------
	# event date is the start Date
	date {
		match => ["startDate", 'YYYY-MM-dd HH:mm']
		timezone => "America/Chicago"
		locale => en
	}
	# adjust date to ISO 8601
	date {
		match => ["startDate", 'YYYY-MM-dd HH:mm']
		timezone => "America/Chicago"
		locale => en
		target => "startDate"
	}
	# adjust date to ISO 8601
	date {
		match => ["endDate", 'YYYY-MM-dd HH:mm']
		timezone => "America/Chicago"
		locale => en
		target => "endDate"
	}
#
# 	## ----- Process Geospatial --------
    geoEnrich {
		database => "/Users/dave/dev/examples/cabi/Chicago Divvy_Stations_Trips_2013/Divvy_Stations_2013_clean.csv" 
		source => "startStation"
		target => "startLocation"
    }
    geoEnrich {
		database => "/Users/dave/dev/examples/cabi/Chicago Divvy_Stations_Trips_2013/Divvy_Stations_2013_clean.csv" 
		source => "endStation"
		target => "endLocation"
    }
#
# 	## ------ Behavior ------
	ruby {
		code => " event['behavior'] =  (event['startStation'] == event['endStation']) ? 'Round Trip' : 'Point to Point'"
	}
	#make all data sources conform to 'Subscriber' and 'Casual' for memberType
	ruby {
		code => " if (event['memberType'] == 'Registered') then event['memberType'] = 'Subscriber' end "
	}
	ruby {
		code => " if (event['memberType'] == 'Customer') then event['memberType'] = 'Subscriber' end "
	}
	
	
	## gender terms from data dictionary
	if ![gender]  {
		ruby {
			code => " event['gender'] =  'Unknown' "
		}
	}
	if ![yob] {
		mutate { remove_field => "yob" }
	} else {
		mutate { 
			convert => {
				"yob" => "integer"
			}
		}
	}

	

}

output { 
  #stdout { codec => rubydebug }
   stdout { codec => dots }
  #stdout { codec => json }
  elasticsearch_http {
  	  host =>  localhost #"54.209.159.230"
   	  index => "bikelog-chi-%{+YYYY}"
  	  index_type => rides
   	  manage_template => false
  	  flush_size => 2000
  	  # user => staff
  	  # password => esFantastic42
  }
}